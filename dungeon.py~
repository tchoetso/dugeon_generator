
import random

class Room(object):
    """Represents a room in a map grid"""

    def __init__ (self, w=3, h=3, x='None', y='None'):
        self.w = w
        self.h = h
        self.x = x
        self.y = y

    def __str__ (self):
        return 'Room object with bottom left corner at %d,%d, width %d, and height %d' % (self.x, self.y, self.w, self.h)


class Map(object):
    """Represents a map in points"""


    def __init__ (self, w=20, h=20):
        
        self.w = w
        self.h = h
        init=dict()
        for i in range(w):
            for j in range(h):
                init[i+1,j+1]='blocked'
        self.__dict__.update(init)

        
    def __getitem__(self, key):
        return self.__dict__[key]

    def __setitem__(self, key, value):
        self.__dict__[key] = value

    def __delitem__(self, key):
        del self.__dict__[key]

    def __contains__(self, key):
        return key in self.__dict__
    
    def __len__(self):
        return len(self.__dict__)

    def __str__ (self):
        """prints graphical representation of map"""
        d=dict()
        for y in range(self.h):
            print ''
            for x in range(self.w):
                if self.__dict__[(x+1,y+1)] == 'blocked':
                    print 'x',
                elif self.__dict__[(x+1,y+1)] == 'tunnel':
                    print '-',
                else:
                    print ' ',
        return ''




def generate_position(room, maps):
    """Generates x and y position for bottom left corner of room"""
    x_pos=random.randint(1, maps.w-room.w)
    y_pos=random.randint(1, maps.h-room.h)
    if x_pos == 1 and y_pos == 1:
        for i in range(room.w+1):
            for j in range(room.h+1):
                if maps[x_pos + i,y_pos + j] != 'blocked':
                    return generate_position(room,maps)
    elif x_pos == 1 and y_pos == maps.h-room.h:
        for i in range(room.w+1):
            for j in range(room.h+1):
                if maps[x_pos + i,y_pos + j-1] != 'blocked':
                    return generate_position(room,maps)
    elif x_pos == 1:
        for i in range(room.w+1):
            for j in range(room.h+2):
                if maps[x_pos + i,y_pos + j-1] != 'blocked':
                    return generate_position(room,maps)
    elif x_pos == maps.w-room.w and y_pos == 1:
        for i in range(room.w+1):
            for j in range(room.h+1):
                if maps[x_pos + i-1,y_pos + j] != 'blocked':
                    return generate_position(room,maps)
    elif x_pos == maps.w-room.w and y_pos == maps.h-room.h:
        for i in range(room.w+1):
            for j in range(room.h+1):
                if maps[x_pos + i-1,y_pos + j-1] != 'blocked':
                    return generate_position(room,maps)
    elif x_pos == maps.w-room.w:
        for i in range(room.w+1):
            for j in range(room.h+2):
                if maps[x_pos + i-1,y_pos + j-1] != 'blocked':
                    return generate_position(room,maps)
    elif y_pos == 1:
        for i in range(room.w+2):
            for j in range(room.h+1):
                if maps[x_pos-1 + i,y_pos + j] != 'blocked':
                    return generate_position(room,maps)
    elif y_pos == maps.h-room.h:
         for i in range(room.w+2):
            for j in range(room.h+1):
                if maps[x_pos + i-1,y_pos + j-1] != 'blocked':
                    return generate_position(room,maps)
    else:
        for i in range(room.w+2):
            for j in range(room.h+2):
                if maps[x_pos + i-1,y_pos + j-1] != 'blocked':
                    return generate_position(room,maps)
      
    return (x_pos,y_pos)

def update_map(rooms, map):
    for room in rooms:
        x_pos,y_pos =generate_position(room, map)
        room.x= x_pos
        room.y= y_pos
        for i in range(room.w):
            for j in range(room.h):
                map[x_pos+i,y_pos+j]='room'

def horizontal_tunnel(x1,x2,starty, maps):
    y = starty;
    x = min(x1,x2)
    endx = max(x1,x2)
    while x != endx:
        maps[x,y] = 'tunnel'
        if maps[x + 2, y] == 'room':
            if maps[x, y + 1] == "tunnel":
                y = y - 1
            elif maps[x, y - 1] == 'tunnel':
                y = y + 1
            else:
                y += random.choice([-1, 1])
        else:
            x += 1

           
def vertical_tunnel(y1,y2,startx, maps):
    x = startx;
    y = min(y1,y2)
    endy = max(y1,y2)
    while y != endy:
        maps[x,y] = 'tunnel'
        if maps[x, y + 2] == 'room':
            if maps[x + 1, y] == "tunnel":
                x = x - 1
            elif maps[x - 1, y] == 'tunnel':
                x = x + 1
            else:
                x += random.choice([-1, 1])
        else:
            y += 1

def draw_tunnels (rooms, maps):
    for room in rooms:
        i=random.randint(0,len(rooms)-1)
        if rooms[i] == room:
            if i == len(rooms)-1:
                i-=1
            else:
                i+=1
        j=random.randint(0,1)
        if j == 0:
            horizontal_tunnel(room.x, rooms[i].x, room.y, maps)
            vertical_tunnel(room.y, rooms[i].y, rooms[i].x, maps)
        if j == 1:
            vertical_tunnel(room.y, rooms[i].y, room.x, maps)
            horizontal_tunnel(room.x, rooms[i].x, rooms[i].y, maps)
           
def main():
    maps=Map()
    room=Room()
    room2=Room(6,4)
    room3=Room(6,6)
    rooms=[room, room2, room3]
    update_map(rooms,maps)
    draw_tunnels(rooms, maps)
    
    print maps
    print room
    print room2
    print room3
    
if __name__ == '__main__':
    main()